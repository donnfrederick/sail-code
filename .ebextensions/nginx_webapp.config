files:
  "/etc/nginx/conf.d/webapp_healthd.conf":
    mode: "000644"
    owner: ec2-user
    group: ec2-user
    encoding: plain
    content: |
      upstream my_app {
        server unix:///var/run/puma/my_app.sock;
      }

      log_format healthd '$msec"$uri"'
                      '$status"$request_time"$upstream_response_time"'
                      '$http_x_forwarded_for';

      server {
        server_tokens off;
        listen 80;
        server_name _ localhost; # need to listen to localhost for worker tier

        client_max_body_size 40m;

        if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2})") {
          set $year $1;
          set $month $2;
          set $day $3;
          set $hour $4;
        }

        set $lang "en";
        if ($http_accept_language ~ "ja") {
          set $lang "ja";
        }

        access_log  /var/log/nginx/access.log main;
        access_log /var/log/nginx/healthd/application.log.$year-$month-$day-$hour healthd;

        root /var/app/current/public;

        location / {
          set $proto $scheme;
          set $port 80;
          if ($http_cloudfront_forwarded_proto = "https")  { set $proto "https"; }
          if ($http_cloudfront_forwarded_proto = "https")  { set $port 443; }
          proxy_set_header X-Forwarded-Proto $proto;
          proxy_set_header X-Forwarded-Port $port;

          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          proxy_pass http://my_app;
        }

        # /api/ 以下の Basic 認証は解除する
        location /api/ {
          set $proto $scheme;
          set $port 80;
          if ($http_cloudfront_forwarded_proto = "https")  { set $proto "https"; }
          if ($http_cloudfront_forwarded_proto = "https")  { set $port 443; }
          proxy_set_header X-Forwarded-Proto $proto;
          proxy_set_header X-Forwarded-Port $port;

          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          proxy_pass http://my_app;
        }

        # WebSocket
        location /cable {
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";

          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_pass http://my_app/cable;
        }

        # Admin
        location ^~ /admin {
          set $proto $scheme;
          if ($http_cloudfront_forwarded_proto = "https")  { set $proto "https"; }
          proxy_set_header X-Forwarded-Proto $proto;

          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          proxy_pass http://my_app;
        }

        location ~* .*\.(ico|css|js|gif|jpe?g|png|swf|mp3|pdf|woff|woff2|eot|robots\.txt)(\?.+)?$ {
          gzip_static on;
          gzip on;
          expires max;
          add_header Cache-Control public;
        }

        error_page 500 502 503 504  /503.html;

        location /503.html {
          try_files /503_$lang.html /503_en.html;
        }
      }

container_commands:
  01_remove_duplicated_nginx_config:
    command: "sudo rm -f /etc/nginx/conf.d/webapp.conf"
  02_nginx_reload:
    command: "sudo service nginx reload"
